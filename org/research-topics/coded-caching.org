#+title: Coded Caching
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../style.css" />
#+OPTIONS: html-style:nil toc:nil title:nil num:nil timestamp:nil
#+INCLUDE: ../logo.org
#+begin_export html
<script> document.querySelectorAll("#mySideNav a#research")[0].classList.add("active"); </script>
#+end_export

* Introduction
The coded caching problem was introduced by M. A. Maddah-Ali and U. Niesen, in "Fundamental limits of caching," 2013 IEEE International Symposium on Information Theory, 2013, pp. 1077-1081, doi: 10.1109/ISIT.2013.6620392. This problem consists of a server connected through a shared, error-free link to \(K\) users. The server stores \(N\) files \(W_1 , \cdots W_N\) each of size \(F\) bits. User \(k , \forall k \in [K]\) has an isolated cache memory \(Z_k\) of size \(MF\) bits for some real number \(M \in [0:N]\).

The system operates in two phases.
1. *Placement Phase*: This phase corresponds to the off-peak hours, when the network traffic is low. In this phase, the users cache are filled from some arbitrary functions of the files.
2. *Delivery Phase*: In this phase, user \(k , \forall k \in [K]\) request a file \(W_{d_k}\) from the server. Every user request a file independently. After receiving the users' requests, the server proceeds by transmitting a signal of size \(RF\) bits over the shared link. Using the content \(Z_k\) of its cache and the signal received over the shared link, each user \(k\) aims to reconstruct its requested file \(W_{d_k}\).

** Multi-access Coded caching
In multi-access coded caching setup, users don't have access to dedicated caches. There are \(C\) cache nodes and each user can access \(L \leq C\) cache nodes. In placement phase, these cache nodes are filled with some arbitrary function of the files. Then in delivery phase, users request their desired files from the server. Server performs coded transmissions of size \(RF\) bits and users should be able to decode their desired files from these transmissions and the content stored in the caches they are accessing.

* Our Contribution
We considered the problem of cache-aided [[file:PIR.org][private information retrieval]]. In this setup, there are \(B\) non-colluding servers storing \(N\) files. We propose a Private Information Retrieval scheme in which \(K\) users aided with \(C\) Multi-Access cache nodes privately retrieve data from distributed servers. We considered several multi-access setups with multiple non-colluding servers with all the messages replicated across the servers. Each server is connected to all the users via error-free broadcast links.

** Publications
- Kanishak Vaidya and B. Sundar Rajan, *``Cache-Aided Multi-User Private Information Retrieval using PDAs''* in IEEE Transactions on Communications, doi: 10.1109/TCOMM.2023.3325473. [[[https://ieeexplore.ieee.org/document/10288207][IEEE]]]
- Kanishak Vaidya and B. Sundar Rajan, *``Multi-User PIR with Cyclic Wraparound Multi-Access Caches''*. Entropy 2023, 25, 1228. https://doi.org/10.3390/e25081228
- Kanishak Vaidya and B. Sundar Rajan, *``Cache-Aided Multi-User Private Information Retrieval using PDAs,''* 2023 IEEE Information Theory Workshop (ITW), Saint-Malo, France, 2023, pp. 125-130, doi: 10.1109/ITW55543.2023.10161671. [[[https://ieeexplore.ieee.org/document/10161671/][IEEE]]]
- Kanishak Vaidya and B. Sundar Rajan, *``Cache-Aided Multi-Access Multi-User Private Information Retrieval,''* 2022 20th International Symposium on Modeling and Optimization in Mobile, Ad hoc, and Wireless Networks (WiOpt), Torino, Italy, 2022, pp. 246-253, doi: 10.23919/WiOpt56218.2022.9930597. [[[https://ieeexplore.ieee.org/document/9930597][IEEE]]]
- Kanishak Vaidya and B. Sundar Rajan, *``Cache-Aided Multi-User Private Information Retrieval using PDAs.''* arXiv:2212.12979, 26 December 2022. [[[https://arxiv.org/abs/2212.12979][ArXiv Link]]]
- Kanishak Vaidya and B. Sundar Rajan, *``Multi-Access Cache-Aided Multi-User Private Information Retrieval,''* arXiv:2201.11481, 9 Feb 2022. [[[https://arxiv.org/abs/2201.11481][ArXiv Link]]]
